# Request body를 선언할 때 Pydantic 모델을 사용
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver import support as support
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from time import sleep
import requests
from io import BytesIO
from PIL import Image
import numpy as np
import random

class ClCharge():

    def __init__(self, driver: webdriver):
        self.driver = driver
        self.rslt = []

    def getDkis(self):
        # transkeyUuid = self.driver.script("return mtk.transkeyUuid")
        # allocationIndex = self.driver.script("return transkey.passwd.allocationIndex")
        # keyIndex = self.driver.script("return transkey.passwd.keyIndex")
        # params = {
        #     'op': 'getKey',
        #     'name': 'passwd',
        #     'keyType': 'lower',
        #     'keyboardType': 'qwertyMobile',
        #     'fieldType': 'password',
        #     'inputName': 'passwd',
        #     'parentKeyboard': 'false',
        #     'transkeyUuid': transkeyUuid,
        #     'exE2E': 'false',
        #     'TK_requestToken': '0',
        #     'allocationIndex': allocationIndex,
        #     'keyIndex': keyIndex
        # }
        url = self.driver.script("return document.querySelector('.dv_transkey_div2_2').style.backgroundImage.split('\"')[1]")
        print(url)
        response = requests.get(url)

        # Img open
        img = Image.open(BytesIO(response.content))
        img = img.resize((1100, 500))

        left, top, right, bottom = 30, 30, 70, 70
        result = []
        for i in range(0, 4):
            for j in range(0, 11):
                img_cropped = img.crop((left + (j*100), top + (i*100), right + (j*100), bottom + (i*100)))
                image_nparray = np.array(img_cropped).flatten().tolist()
                result.append(any(image_nparray))

        dkis = [i for i in range(len(result)) if result[i] == False]
        print(dkis)
        return dkis

    def login(self, id, password):
        # self.driver.get('https://accounts.hcaptcha.com/verify_email/5835d231-81a9-4e50-b047-b1bebb701306')
        # sleep(5)
        # self.driver.add_cookie({
        #     'name' : 'hc_accessibility',
        #     'value' : 'CRZmjeirqf0EbZriAMQSOxYupwGQFpXHexW9c5kDlZ0aiHRBrtZo2XRREKayLQVprys6w7zMu/CJn6P5nfuKCIfmpAeet30JhPXeE52EiA1Ta6z1z6hBkwLlhwnM0Ah2uWrKcAbsiN5lZuyyMWbso0bAKveAUHq62Q6YkxFan57uijxCE3+1XuSGKGpxVz39Gz4maXa3NFZWz9pe5+2jmFMez/4yOCwaMu0vwKPmWVROwn4yPktfAtr1qENEgBeAOsYIFic27EX/NJE/rhIuwLMxG2BEWJxRE335ePQE4/ppZPkoYqHx9bfigC6CJyWNRpaxD1OK/MU0v0ag6Nwr+61ueE7PykMFTLV13tdXdL/ELxikB19AtTItoWCKwr9s+gksWMKKgGiraCnJUM7rZP8AS6uKuTxGIr84LsM+4a2zJDvCB2LnGmZ6ucdt2RMRFOtUKMEMvMyPpnMpzTbkH1IX0SRJemaZD2JAqSY3NjPeO4dUPC/vKb0opJAyQfejizA8UcWOBdzdEmvY5RcaAKVe4+J9Pal7++A9dpADjZrhCiRdwvY+D7S6FrDCAjI4VuGsPIQ3E/IeFkPdzkEB1462bb6TNlaH93rV+TnhAG2wINoqPVwZ4Hhj7+9QJTvjEFTiE7khVHnzZ7gUm1deyPe94IvgS1gnaP6pOK/FKmnKsn7JN7LE0ixDghReXXoeG0EE2MbMmDip5cfuReekBoq5WQPL0bqMUrhYkr/KiJp8EoKfw3EzTGVv6xPCjgZNMHBxTS8DUHtCH74pSLWUB2WAAQPE67dsqEW/rpPbvK+rJiwLf7JvDo0osItHAl4d7QBsZ3lZecmHzuq/25LYM/nZun7LU4sD7bWeh1IqOk2C19b69aVF0s8UXyVeziDStHh4Z5sP7TVA4IR6o1T1FrF1TSADNqDCa1mSyIBUAKCBk0D6VCN0mwB0U2ogyXi31rFhg26m5u9Vv9PLeYxOZ2/XQOBrxrQbjkitgPJdQb5Zts+2gGNVdyO9wAQvnzF90Vi5Ap0f6ExSNiTtMOpWO+xEFzRa12Mq4RoFoVs3822gcknPWy3uo132IUl5Wa8hD+LNylM2HCf6jBl0Z+BzjzngYhBy9qYvVAeiQ6VsMBrYn20D'
        # })

        # self.driver.get('https://newassests.hcaptcha.com/')
        # # sleep(5)
        # self.driver.add_cookie({
        #     'name' : 'hc_accessibility',
        #     'value' : 'CRZmjeirqf0EbZriAMQSOxYupwGQFpXHexW9c5kDlZ0aiHRBrtZo2XRREKayLQVprys6w7zMu/CJn6P5nfuKCIfmpAeet30JhPXeE52EiA1Ta6z1z6hBkwLlhwnM0Ah2uWrKcAbsiN5lZuyyMWbso0bAKveAUHq62Q6YkxFan57uijxCE3+1XuSGKGpxVz39Gz4maXa3NFZWz9pe5+2jmFMez/4yOCwaMu0vwKPmWVROwn4yPktfAtr1qENEgBeAOsYIFic27EX/NJE/rhIuwLMxG2BEWJxRE335ePQE4/ppZPkoYqHx9bfigC6CJyWNRpaxD1OK/MU0v0ag6Nwr+61ueE7PykMFTLV13tdXdL/ELxikB19AtTItoWCKwr9s+gksWMKKgGiraCnJUM7rZP8AS6uKuTxGIr84LsM+4a2zJDvCB2LnGmZ6ucdt2RMRFOtUKMEMvMyPpnMpzTbkH1IX0SRJemaZD2JAqSY3NjPeO4dUPC/vKb0opJAyQfejizA8UcWOBdzdEmvY5RcaAKVe4+J9Pal7++A9dpADjZrhCiRdwvY+D7S6FrDCAjI4VuGsPIQ3E/IeFkPdzkEB1462bb6TNlaH93rV+TnhAG2wINoqPVwZ4Hhj7+9QJTvjEFTiE7khVHnzZ7gUm1deyPe94IvgS1gnaP6pOK/FKmnKsn7JN7LE0ixDghReXXoeG0EE2MbMmDip5cfuReekBoq5WQPL0bqMUrhYkr/KiJp8EoKfw3EzTGVv6xPCjgZNMHBxTS8DUHtCH74pSLWUB2WAAQPE67dsqEW/rpPbvK+rJiwLf7JvDo0osItHAl4d7QBsZ3lZecmHzuq/25LYM/nZun7LU4sD7bWeh1IqOk2C19b69aVF0s8UXyVeziDStHh4Z5sP7TVA4IR6o1T1FrF1TSADNqDCa1mSyIBUAKCBk0D6VCN0mwB0U2ogyXi31rFhg26m5u9Vv9PLeYxOZ2/XQOBrxrQbjkitgPJdQb5Zts+2gGNVdyO9wAQvnzF90Vi5Ap0f6ExSNiTtMOpWO+xEFzRa12Mq4RoFoVs3822gcknPWy3uo132IUl5Wa8hD+LNylM2HCf6jBl0Z+BzjzngYhBy9qYvVAeiQ6VsMBrYn20D'
        # })


        self.driver.get(url='https://www.cultureland.co.kr/signin/login.do')

        self.driver.find_element(By.ID, 'userId').send_keys('a')
        sleep(0.1)
        for i in id:
            # self.driver.script("EnKeyMatch()")
            # sleep(0.1)
            self.driver.find_element(By.ID, 'userId').send_keys(i)
            # sleep(0.1)
            # self.driver.script("EnKeyMatch()")
            sleep(0.1)

        # self.driver.script("document.querySelector('#userId').value='"+id+"'")
        sleep(1)
        self.driver.find_element(By.ID, 'userPwd').send_keys('c')
        sleep(0.1)
        for p in password:
            # self.driver.script("EnKeyMatch()")
            # sleep(0.1)
            sleep(0.1)
            self.driver.find_element(By.ID, 'userPwd').send_keys(p)
            sleep(0.1)
            # self.driver.script("EnKeyMatch()")
            # sleep(0.1)
        self.driver.script("document.querySelector('.btn-cont').children[1].click()")
        sleep(10)
        # self.driver.switch_to.frame(2)
        # WebDriverWait(self.driver, 3).until(EC.presence_of_element_located((By.CLASS_NAME, 'service_1')))
        return self


    def charge(self, pins):
        self.driver.get(url=f'https://www.cultureland.co.kr/charge/gift/getCulVoucher.do')
        self.driver.script("document.querySelector('#frm > fieldset > div > button.btn.minimal.ml-at.stock-open').click()")

        self.inpTxts = self.driver.script("return document.querySelectorAll('.InFld')")

        for idx, inpTxt in enumerate(self.inpTxts):
            if idx >= len(pins) : break

            self.pin = pins[idx]
            self.inpTxtId = inpTxt.get_attribute('id')
            self.driver.script("document.querySelector('#" + self.inpTxtId + "').value = " + self.pin)
            
        self.driver.script("charge()")
        # WebDriverWait(self.driver, 3).until(EC.alert_is_present())
        # self.alert = self.driver.switch_to.alert
        # self.alert.accept()
        sleep(5)
        # WebDriverWait(self.driver, 3).until(EC.presence_of_element_located((By.CLASS_NAME, 'chargeDatail')))
        return self
    
    def result(self):
        self.chargeResults = self.driver.script("return Array.prototype.slice.call(document.querySelectorAll('tr')).map(e => e.innerText)")
        self.chargeResults.pop(0)
        
        for chargeResult in self.chargeResults:
            rowData = chargeResult.split('\t')
            self.rslt.append({'number': rowData[0],
                                'orderNumber': rowData[1],\
                                'pin': rowData[2] + '_' + rowData[3],\
                                'chargeResult': rowData[4],\
                                'amt': rowData[5]})
        return self.rslt
